# Lamport Timestamps (logical timestamps - ordering)

- important building blocks in distributed systems

- timestamps obeys causality

- Logical relation: Happens-Before (->)
- Three rules:
 1) On same process: a -> b, if time(a) < time(b) (using local clock)
 2) If p1 sends m to p2: send(m) -> receive(m)
 3) Transitivity: if a -> b and b -> c then a -> c

- Rules:
    * each process uses a local counter (clock) which is integer (initial value is zero)
    * process increments its counter when a send or an instruction happens at it.
    * the counter is assigned to the event as its timestamp
    * a send (message) event carries its timestamp
    * for a receive (message) event the counter is updated by max(local clock, message timestamp) + 1

- Not always IMPLYING causality: concurrent events (that's not necessarily true)

# Concurrent Events

- A pair concurrent events doesn't have a casual path from one  to another (either way, in  the pair)
- Lamport timestamps not guaranteed to be ordered or unequal for concurrent events
- ok, since concurrent events are not causality related!
- Remember:

    E1 -> E2 => timestamp(E1) < timestamp(E2), BUT
    timestamp(E1) < timestamp(E2) => {E1 -> E2} OR {E1 and E2 concurrent}
    
